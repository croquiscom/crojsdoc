#!/usr/bin/env node

var coffee = require('coffee-script');
var generate_doc = require('../lib/generate_doc');
var path = require('path');
var yaml = require('js-yaml');

options = {};

var optparse = require('optparse');
var switches = [
  [ '-o', '--output DIRECTORY', 'Output directory' ],
  [ '-t', '--title TITLE', 'Document Title' ],
  [ '-q', '--quite', 'less output' ],
  [ '-r', '--readme DIRECTORY', 'README.md directory path'],
  [ '-f', '--files', 'included source files' ],
  [ '--external-types JSONFILE', 'external type definitions' ]
];
parser = new optparse.OptionParser(switches);
parser.on('*', function (opt, value) {
  if(value===undefined) value = true;
  options[opt] = value;
});
argv = parser.parse(process.argv.slice(2));

try {
  var config = require(path.join(process.cwd(), 'crojsdoc.yaml'));
  if (config.hasOwnProperty('output')) {
    options.output = config.output;
  }
  if (config.hasOwnProperty('title')) {
    options.title = config.title;
  }
  if (config.hasOwnProperty('quite')) {
    options.quite = config.quite === true;
  }
  if (config.hasOwnProperty('files')) {
    options.files = config.files === true;
  }
  if (config.hasOwnProperty('readme') && typeof config.readme === 'string') {
    options.readme = config.readme;
  }
  if (config.hasOwnProperty('external-types')) {
    options['external-types'] = config['external-types'];
  }
  if (config.hasOwnProperty('sources')) {
    if (Array.isArray(config.sources)) {
      [].push.apply(argv, config.sources);
    } else {
      argv.push(config.sources);
    }
  }
  if (config.hasOwnProperty('github')) {
    options.github = config.github;
  }
} catch (e) {
}

generate_doc(argv, options);
